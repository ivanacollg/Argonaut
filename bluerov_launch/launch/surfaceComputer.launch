<launch>
    <arg name="qgc" default="false"/>
    <arg name="imu" default="false"/>
    <arg name="dvl" default="false"/>
    <arg name="depth" default="true"/>
    <arg name="sonar" default="false"/>
    <arg name="gps" default="false"/>
    <arg name="camera" default="true"/>
    <arg name="joy" default="true"/>
    <arg name="move_base" default="false"/>
    <arg name="sonar_viewer" default="true"/>
    <arg name="rviz" default="true"/>
    <arg name="plot" default="true"/>
    <arg name="stereo" default="true"/>

    <!-- global salinity parameter used by sonar/dvl/depth -->
    <arg name="water" default="fresh"/>
    <param name="water" type="str" value="$(arg water)"/>

    <!-- extra DVL commands (split by ';') -->
    <arg name="commands" default=""/>

    <arg name="translation_limit" default="100"/>
    <arg name="rotation_limit" default="80"/>
    <!-- cmd_vel limit (max will ouput max PWM) -->
    <arg name="max_vel" default="0.2"/>
    <arg name="max_omega" default="0.15"/>

    <node pkg="bluerov_launch" name="mavproxy" type="mavproxy.sh"/>
    <node if="$(arg qgc)" pkg="bluerov_launch" name="qgc" type="qgc.sh"/>
    <include if="$(arg joy)" file="$(find bluerov_control)/launch/joy_control.launch">
        <arg name="translation_limit" value="$(arg translation_limit)"/>
        <arg name="rotation_limit" value="$(arg rotation_limit)"/>
        <arg name="max_vel" value="$(arg max_vel)"/>
        <arg name="max_omega" value="$(arg max_omega)"/>
    </include>

    <!--include if="$(arg move_base)" file="$(find bluerov_control)/launch/move_base.launch">
    </include-->

    <node if="$(arg imu)" pkg="bluerov_launch" name="connect_vn100_imu" type="connect_vn100_imu.sh"/>
    <include if="$(arg imu)" file="$(find imu_vn_100)/launch/vn_100_cont.launch">
        <arg name="port" value="/tmp/vn100_imu"/>
    </include>

    <node if="$(arg dvl)" pkg="bluerov_launch" name="connect_rti_dvl" type="connect_rti_dvl.sh"/>
    <node if="$(arg dvl)" pkg="rti_dvl" name="rti_dvl" type="rti_dvl_node.py" output="screen">
        <param name="device" value="/tmp/rti_dvl"/>
        <param name="commands" value="$(arg commands)"/>
    </node>

    <node if="$(arg depth)" pkg="bar30_depth" name="bar30_depth" type="bar30_depth_node.py" output="screen">
        <param name="device" value="udp:192.168.2.1:14552"/>
    </node>

    <include if="$(arg sonar)" file="$(find sonar_oculus)/launch/sonar_oculus.launch">
        <arg name="rqt" value="true"/>
    </include>

    <node if="$(arg gps)" pkg="waterlinked_gps" name="waterlinked_gps_node" type="waterlinked_gps_node.py" output="screen"/>

    <node if="$(arg camera)" pkg="bluerov_launch" name="video" type="video_compressed.py" output="screen">
        <param name="compressed_flag" value="true"/>
    </node>

    <node if="$(arg sonar_viewer)" pkg="sonar_oculus" name="oculus_viewerM750d" type="oculus_viewer.py" output="screen" args="M750d"/>
    <node if="$(arg sonar_viewer)" pkg="sonar_oculus" name="oculus_viewerM1200d" type="oculus_viewer.py" output="screen" args="M1200d"/>

    <node if="$(arg rviz)" type="rviz" name="rviz" pkg="rviz" args="-d $(find bluerov_launch)/rviz/sensors.rviz" />

    <!--include if="$(arg plot)" file="$(find bluerov_launch)/launch/plot.launch">
    </include-->

    <!--include if="$(arg stereo)" file="$(find stereo_sonar)/launch/stereoSonar.launch">
    </include-->

    <!--node pkg="tf2_ros" name="map_to_baselink_tf_publisher" type="static_transform_publisher" args="0 0 0 0 0 1.5708 map base_link"/-->

    <!-- For off line testong only-->
    <node pkg="tf2_ros" type="static_transform_publisher" name="world2baselink" args="0 0 0 0 0 1.57  world base_link" />

</launch>
